// Generated by dts-bundle-generator v7.1.0

import { ApisauceInstance } from 'apisauce'

export interface FormValidationResult {
  isValid: boolean;
  inputElement: HTMLElement;
  message?: string;
}

export interface FormValidationFeedbackHandlers {
  onValid: (result: FormValidationResult) => void;
  onInvalid: (result: FormValidationResult) => void;
}

export interface InputRules {
  element: HTMLElement;
  rules: Array<Rule>;
}

export interface Rule {
  validatorName?: keyof RegexRules;
  customValidator?: Validator;
  invalidMessage: string;
}

export type Validator = (value: string) => boolean;
export type RegexRules = {
  [key: string]: RegExp;
};

export interface AscApiResponse {
  ret: number | undefined;
  msg?: string;
  data?: object;
}

export interface ApiRequestCallback {
  isRequestSucceed: boolean;
  feedbackShowed: boolean;
  errorMessage?: string;
  resultData?: AscApiResponse;
}

export interface ApiRequestFeedbackHandlers {
  onSuccess: (message: string) => void;
  onError: (message: string) => void;
  onInfo: (message: string) => void;
  onWarning: (message: string) => void;
  onUnAuthorized: (message: string) => void;
}

declare class ApiUtils {
  private readonly _apisauceInstance
  private readonly _feedbackHandlers
  private _processResponse

  constructor (feedbackHandlers: ApiRequestFeedbackHandlers, baseUrl?: string);

  get apisauceInstance (): ApisauceInstance;

  setHeader (key: string, value: string): void;

  get (url: string, data?: object): Promise<ApiRequestCallback>;

  post (url: string, data?: object): Promise<ApiRequestCallback>;

  put (url: string, data?: object): Promise<ApiRequestCallback>;

  del (url: string, data?: object): Promise<ApiRequestCallback>;

  patch (url: string, data?: object): Promise<ApiRequestCallback>;
}

export interface MsgOptions {
  type?: 'info' | 'success' | 'warn' | 'error' | 'loading';
  content?: string;
  duration?: number;
  onClose?: () => void;
  closable?: boolean;
}

declare class Message {
  private _options
  private readonly _prefixClass
  private readonly _topLength
  private readonly _containerId
  private _message
  private _showMessage
  private _closeMessage
  private _getType
  private _getContent
  private _getDurationMs
  private _isClosable
  private _initMessageContainer
  private _getMessageContainer
  private _generateMessageElement
  private _addCloseButton
  private _getIcon
  private _resetDefaultOptions

  constructor (options?: MsgOptions);

  info (msg: string): Promise<void>;

  warn (msg: string): Promise<void>;

  error (msg: string): Promise<void>;

  success (msg: string): Promise<void>;

  loading (msg?: string): () => Promise<any>;

  reset (): void;
}

declare class Validation {
  private readonly _feedbackHandlers
  private initialized
  private _withAsync
  private validateResult
  private inputRules
  private handleValidateField

  constructor (feedbackHandlers: FormValidationFeedbackHandlers, withAsync?: boolean);

  init (inputRules: InputRules[]): Validation;

  withAsync (): Validation;

  noAsync (): Validation;

  validate (): Validation;

  getResult (): boolean;
}

declare class Dsync {
  private _data

  constructor ();

  set (key: string, value: string | number | object): void;

  get (key: string): string | number | object | undefined;

  remove (key: string): void;

  has (key: string): boolean;
}

export interface FeedbackHandlers {
  apiFeedbacks?: ApiRequestFeedbackHandlers;
  formValidationFeedbacks?: FormValidationFeedbackHandlers;
}

export interface WshopUtilsConfiguration {
  feedbacks?: FeedbackHandlers;
  apiVersion?: string;
}

export default class WshopUtils {
  private _config
  private readonly _message
  private readonly _api
  private readonly _validator
  private readonly _dsync

  constructor (config?: WshopUtilsConfiguration);

  setApiFeedbacks (fb: ApiRequestFeedbackHandlers): void;

  setFormValidationFeedbacks (fb: FormValidationFeedbackHandlers): void;

  msg (): Message;

  api (): ApiUtils;

  vd (withAsync?: boolean): Validation;

  md5 (str: string): string;

  sha256 (str: string): string;

  formDataToObject (formId: string): any;

  base64Encode (str: string): string;

  base64Decode (str: string): string;

  dsync (): Dsync;
}
declare module '@wshops/utils';
export {}
